
ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080017b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          00000290  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200002b0  200002b0  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006320  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001264  00000000  00000000  00026370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  000275d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000710  00000000  00000000  00027da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002c51  00000000  00000000  000284b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b9d  00000000  00000000  0002b101  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002dc9e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000205c  00000000  00000000  0002dd1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001564 	.word	0x08001564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08001564 	.word	0x08001564

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	887a      	ldrh	r2, [r7, #2]
 80005dc:	831a      	strh	r2, [r3, #24]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	887a      	ldrh	r2, [r7, #2]
 80005fa:	835a      	strh	r2, [r3, #26]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
 8000614:	4613      	mov	r3, r2
 8000616:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000620:	787a      	ldrb	r2, [r7, #1]
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	f003 0307 	and.w	r3, r3, #7
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b29b      	uxth	r3, r3
 8000636:	4618      	mov	r0, r3
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	b29b      	uxth	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3208      	adds	r2, #8
 8000644:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	210f      	movs	r1, #15
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	ea02 0103 	and.w	r1, r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f100 0208 	add.w	r2, r0, #8
 8000662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3208      	adds	r2, #8
 8000672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4313      	orrs	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b29b      	uxth	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3208      	adds	r2, #8
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	2302      	movs	r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <RCC_GetClocksFreq+0x140>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f003 030c 	and.w	r3, r3, #12
 80006c4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d007      	beq.n	80006dc <RCC_GetClocksFreq+0x40>
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d009      	beq.n	80006e4 <RCC_GetClocksFreq+0x48>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d13d      	bne.n	8000750 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <RCC_GetClocksFreq+0x144>)
 80006d8:	601a      	str	r2, [r3, #0]
      break;
 80006da:	e03d      	b.n	8000758 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a41      	ldr	r2, [pc, #260]	; (80007e4 <RCC_GetClocksFreq+0x148>)
 80006e0:	601a      	str	r2, [r3, #0]
      break;
 80006e2:	e039      	b.n	8000758 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006e4:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <RCC_GetClocksFreq+0x140>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	0d9b      	lsrs	r3, r3, #22
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006f0:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <RCC_GetClocksFreq+0x140>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00c      	beq.n	800071a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000700:	4a38      	ldr	r2, [pc, #224]	; (80007e4 <RCC_GetClocksFreq+0x148>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	fbb2 f3f3 	udiv	r3, r2, r3
 8000708:	4a34      	ldr	r2, [pc, #208]	; (80007dc <RCC_GetClocksFreq+0x140>)
 800070a:	6852      	ldr	r2, [r2, #4]
 800070c:	0992      	lsrs	r2, r2, #6
 800070e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000712:	fb02 f303 	mul.w	r3, r2, r3
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	e00b      	b.n	8000732 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800071a:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <RCC_GetClocksFreq+0x144>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <RCC_GetClocksFreq+0x140>)
 8000724:	6852      	ldr	r2, [r2, #4]
 8000726:	0992      	lsrs	r2, r2, #6
 8000728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <RCC_GetClocksFreq+0x140>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	3301      	adds	r3, #1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	fbb2 f2f3 	udiv	r2, r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
      break;
 800074e:	e003      	b.n	8000758 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <RCC_GetClocksFreq+0x144>)
 8000754:	601a      	str	r2, [r3, #0]
      break;
 8000756:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <RCC_GetClocksFreq+0x140>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000760:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000768:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <RCC_GetClocksFreq+0x14c>)
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	40da      	lsrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <RCC_GetClocksFreq+0x140>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000788:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	0a9b      	lsrs	r3, r3, #10
 800078e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <RCC_GetClocksFreq+0x14c>)
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <RCC_GetClocksFreq+0x140>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	0b5b      	lsrs	r3, r3, #13
 80007b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007b8:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <RCC_GetClocksFreq+0x14c>)
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685a      	ldr	r2, [r3, #4]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	40da      	lsrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60da      	str	r2, [r3, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3724      	adds	r7, #36	; 0x24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800
 80007e0:	00f42400 	.word	0x00f42400
 80007e4:	007a1200 	.word	0x007a1200
 80007e8:	20000000 	.word	0x20000000

080007ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007fe:	490a      	ldr	r1, [pc, #40]	; (8000828 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4313      	orrs	r3, r2
 8000808:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800080a:	e006      	b.n	800081a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <RCC_AHB1PeriphClockCmd+0x3c>)
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	43db      	mvns	r3, r3
 8000816:	4013      	ands	r3, r2
 8000818:	630b      	str	r3, [r1, #48]	; 0x30
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800083e:	490a      	ldr	r1, [pc, #40]	; (8000868 <RCC_APB1PeriphClockCmd+0x3c>)
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <RCC_APB1PeriphClockCmd+0x3c>)
 8000842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800084a:	e006      	b.n	800085a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <RCC_APB1PeriphClockCmd+0x3c>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <RCC_APB1PeriphClockCmd+0x3c>)
 8000850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	43db      	mvns	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	640b      	str	r3, [r1, #64]	; 0x40
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d006      	beq.n	800088c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800087e:	490a      	ldr	r1, [pc, #40]	; (80008a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4313      	orrs	r3, r2
 8000888:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800088a:	e006      	b.n	800089a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <RCC_APB2PeriphClockCmd+0x3c>)
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	43db      	mvns	r3, r3
 8000896:	4013      	ands	r3, r2
 8000898:	644b      	str	r3, [r1, #68]	; 0x44
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	887a      	ldrh	r2, [r7, #2]
 80008bc:	819a      	strh	r2, [r3, #12]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	891b      	ldrh	r3, [r3, #8]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	4013      	ands	r3, r2
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e001      	b.n	80008f4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	8a1b      	ldrh	r3, [r3, #16]
 8000922:	b29b      	uxth	r3, r3
 8000924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	88db      	ldrh	r3, [r3, #6]
 8000932:	461a      	mov	r2, r3
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	4313      	orrs	r3, r2
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	899b      	ldrh	r3, [r3, #12]
 8000946:	b29b      	uxth	r3, r3
 8000948:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000950:	f023 030c 	bic.w	r3, r3, #12
 8000954:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	889a      	ldrh	r2, [r3, #4]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	891b      	ldrh	r3, [r3, #8]
 800095e:	4313      	orrs	r3, r2
 8000960:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000966:	4313      	orrs	r3, r2
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	4313      	orrs	r3, r2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	8a9b      	ldrh	r3, [r3, #20]
 800097e:	b29b      	uxth	r3, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000988:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	899b      	ldrh	r3, [r3, #12]
 800098e:	461a      	mov	r2, r3
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	4313      	orrs	r3, r2
 8000994:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	b29a      	uxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe7a 	bl	800069c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <USART_Init+0x168>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d003      	beq.n	80009b8 <USART_Init+0xb4>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <USART_Init+0x16c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d102      	bne.n	80009be <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	e001      	b.n	80009c2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	899b      	ldrh	r3, [r3, #12]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da0c      	bge.n	80009e8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009ce:	6a3a      	ldr	r2, [r7, #32]
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	009a      	lsls	r2, r3, #2
 80009d8:	441a      	add	r2, r3
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	e00b      	b.n	8000a00 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009e8:	6a3a      	ldr	r2, [r7, #32]
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	009a      	lsls	r2, r3, #2
 80009f2:	441a      	add	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <USART_Init+0x170>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	095b      	lsrs	r3, r3, #5
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	091b      	lsrs	r3, r3, #4
 8000a12:	2264      	movs	r2, #100	; 0x64
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	899b      	ldrh	r3, [r3, #12]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da0c      	bge.n	8000a44 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	3332      	adds	r3, #50	; 0x32
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <USART_Init+0x170>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	e00b      	b.n	8000a5c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	3332      	adds	r3, #50	; 0x32
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <USART_Init+0x170>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	811a      	strh	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40011400 	.word	0x40011400
 8000a74:	51eb851f 	.word	0x51eb851f

08000a78 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	899b      	ldrh	r3, [r3, #12]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a9a:	e007      	b.n	8000aac <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	899b      	ldrh	r3, [r3, #12]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	819a      	strh	r2, [r3, #12]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	809a      	strh	r2, [r3, #4]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000b12:	2201      	movs	r2, #1
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d103      	bne.n	8000b2a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	330c      	adds	r3, #12
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e009      	b.n	8000b3e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d103      	bne.n	8000b38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3310      	adds	r3, #16
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e002      	b.n	8000b3e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b3e:	787b      	ldrb	r3, [r7, #1]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	6811      	ldr	r1, [r2, #0]
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b50:	e006      	b.n	8000b60 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	6811      	ldr	r1, [r2, #0]
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	43d2      	mvns	r2, r2
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	095b      	lsrs	r3, r3, #5
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d107      	bne.n	8000bba <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	899b      	ldrh	r3, [r3, #12]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e011      	b.n	8000bde <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d107      	bne.n	8000bd0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	8a1b      	ldrh	r3, [r3, #16]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e006      	b.n	8000bde <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	8a9b      	ldrh	r3, [r3, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000be6:	2201      	movs	r2, #1
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <USART_GetITStatus+0xa4>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	74fb      	strb	r3, [r7, #19]
 8000c0e:	e001      	b.n	8000c14 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <Audio_MAL_IRQHandler+0xec>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4610      	mov	r0, r2
 8000c34:	f7ff fbd2 	bl	80003dc <DMA_GetFlagStatus>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d064      	beq.n	8000d08 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d04c      	beq.n	8000ce0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c46:	bf00      	nop
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fbad 	bl	80003ac <DMA_GetCmdStatus>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f7      	bne.n	8000c48 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <Audio_MAL_IRQHandler+0xec>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4610      	mov	r0, r2
 8000c64:	f7ff fbf6 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <Audio_MAL_IRQHandler+0xf4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <Audio_MAL_IRQHandler+0xf8>)
 8000c70:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	bf28      	it	cs
 8000c7e:	4613      	movcs	r3, r2
 8000c80:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <Audio_MAL_IRQHandler+0xf8>)
 8000c82:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4924      	ldr	r1, [pc, #144]	; (8000d1c <Audio_MAL_IRQHandler+0xf8>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fb1a 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb6c 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <Audio_MAL_IRQHandler+0xf4>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca8:	d203      	bcs.n	8000cb2 <Audio_MAL_IRQHandler+0x8e>
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	e000      	b.n	8000cb4 <Audio_MAL_IRQHandler+0x90>
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <Audio_MAL_IRQHandler+0xfc>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <Audio_MAL_IRQHandler+0xf4>)
 8000cb8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	bf28      	it	cs
 8000cca:	460b      	movcs	r3, r1
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <Audio_MAL_IRQHandler+0xf0>)
 8000cd0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fb4b 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000cde:	e013      	b.n	8000d08 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb44 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <Audio_MAL_IRQHandler+0xe8>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <Audio_MAL_IRQHandler+0xec>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f7ff fbac 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <Audio_MAL_IRQHandler+0xf4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fad0 	bl	80012a8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000018 	.word	0x20000018
 8000d10:	2000001c 	.word	0x2000001c
 8000d14:	20000010 	.word	0x20000010
 8000d18:	20000040 	.word	0x20000040
 8000d1c:	20000080 	.word	0x20000080
 8000d20:	0001fffe 	.word	0x0001fffe

08000d24 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d28:	f7ff ff7c 	bl	8000c24 <Audio_MAL_IRQHandler>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000d34:	f7ff ff76 	bl	8000c24 <Audio_MAL_IRQHandler>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d40:	2102      	movs	r1, #2
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <SPI3_IRQHandler+0x3c>)
 8000d44:	f7ff fdc1 	bl	80008ca <SPI_I2S_GetFlagStatus>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d011      	beq.n	8000d72 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <SPI3_IRQHandler+0x40>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d106      	bne.n	8000d64 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d56:	f000 fab2 	bl	80012be <EVAL_AUDIO_GetSampleCallBack>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fa94 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d64:	f000 faab 	bl	80012be <EVAL_AUDIO_GetSampleCallBack>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <SPI3_IRQHandler+0x3c>)
 8000d6e:	f7ff fd9d 	bl	80008ac <SPI_I2S_SendData>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40003c00 	.word	0x40003c00
 8000d7c:	20000014 	.word	0x20000014

08000d80 <Clear_ESPBuffer>:
* Description    : Buffer temizlenir.
* Input          : None
* Return         : None
***********************************************************/
static void Clear_ESPBuffer(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
    uint16_t i;

    for(i=0;i<ESP8266BUFFER_LENGHT;i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	e006      	b.n	8000d9a <Clear_ESPBuffer+0x1a>
        g_arrui8ESP8266Buf[i] = 0;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <Clear_ESPBuffer+0x34>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<ESP8266BUFFER_LENGHT;i++)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	3301      	adds	r3, #1
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da0:	d3f4      	bcc.n	8000d8c <Clear_ESPBuffer+0xc>

    ESPWriteIndex=0;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <Clear_ESPBuffer+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	801a      	strh	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	200000bc 	.word	0x200000bc
 8000db8:	2000003c 	.word	0x2000003c

08000dbc <Delay>:
* Function Name  : Delay
* Description    : Yazılımsal Gecikme Fonksiyonu.
* Input          : Gecikme Degeri
* Return         : None
***********************************************************/
void Delay(__IO uint32_t nCount) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  while(nCount--) {
 8000dc4:	bf00      	nop
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1fa      	bne.n	8000dc6 <Delay+0xa>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <USART_puts>:
* Description    : Girdiðimiz cümle ilgili buffer'dan çýkar.
* Input          : USARTx
* Return         : None
***********************************************************/
void USART_puts(USART_TypeDef* USARTx, volatile char *s)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	while(*s){
 8000de6:	e013      	b.n	8000e10 <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8000de8:	bf00      	nop
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f8      	beq.n	8000dea <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fe58 	bl	8000ab8 <USART_SendData>
		*s++;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	603a      	str	r2, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
	while(*s){
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1e6      	bne.n	8000de8 <USART_puts+0xc>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <Usart_InitializeHW>:
* Description    :
* Input          : None
* Return         : None
***********************************************************/
void Usart_InitializeHW(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef     GPIO_InitStruct;

    // B Portuna Clock Verilir
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff fcdd 	bl	80007ec <RCC_AHB1PeriphClockCmd>

    /**
    * PB6 ve PB7 Pinleri alternatif fonksiyon olarak çalýþacaðý tanýmlanýr
    * @onemli Usartý aktif etmeden önce çaðrýlmalýdýr.!
    */
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //	TX()
 8000e32:	2207      	movs	r2, #7
 8000e34:	2106      	movs	r1, #6
 8000e36:	4825      	ldr	r0, [pc, #148]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e38:	f7ff fbe6 	bl	8000608 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1); //	RX()
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	2107      	movs	r1, #7
 8000e40:	4822      	ldr	r0, [pc, #136]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e42:	f7ff fbe1 	bl	8000608 <GPIO_PinAFConfig>
    // Initialize pins as alternating function
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000e46:	23c0      	movs	r3, #192	; 0xc0
 8000e48:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000e56:	2303      	movs	r3, #3
 8000e58:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481b      	ldr	r0, [pc, #108]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e60:	f7ff fb26 	bl	80004b0 <GPIO_Init>

    GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3); //	TX()
 8000e64:	2207      	movs	r2, #7
 8000e66:	210a      	movs	r1, #10
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e6a:	f7ff fbcd 	bl	8000608 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3); //	RX()
 8000e6e:	2207      	movs	r2, #7
 8000e70:	210b      	movs	r1, #11
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e74:	f7ff fbc8 	bl	8000608 <GPIO_PinAFConfig>
    // Initialize pins as alternating function
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8000e78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000e94:	f7ff fb0c 	bl	80004b0 <GPIO_Init>

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8000e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000eb4:	f7ff fafc 	bl	80004b0 <GPIO_Init>

    GPIO_ResetBits(GPIOB,GPIO_Pin_13);
 8000eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <Usart_InitializeHW+0xa8>)
 8000ebe:	f7ff fb94 	bl	80005ea <GPIO_ResetBits>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <Usart_InitializeAp>:
* Description    :
* Input          : None
* Return         : None
***********************************************************/
void Usart_InitializeAp(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStruct;
    NVIC_InitTypeDef NVIC_InitStructure;
    /**
     * USART1 modülüne Clock verilir.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff fcc7 	bl	800086c <RCC_APB2PeriphClockCmd>
    /**
     * USART3 modülüne Clock verilir.
     */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ee4:	f7ff fca2 	bl	800082c <RCC_APB1PeriphClockCmd>
     * Data bit uzunlugumuz 8
     *
     * USART1 Kurulup
     * Aktif edilir.
     */
    USART_InitStruct.USART_BaudRate = 115200;
 8000ee8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000eec:	60bb      	str	r3, [r7, #8]
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82bb      	strh	r3, [r7, #20]
    USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	827b      	strh	r3, [r7, #18]
    USART_InitStruct.USART_Parity = USART_Parity_No;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	823b      	strh	r3, [r7, #16]
    USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]
    USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000efe:	2300      	movs	r3, #0
 8000f00:	81bb      	strh	r3, [r7, #12]
    USART_Init(USART1, &USART_InitStruct);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4619      	mov	r1, r3
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <Usart_InitializeAp+0xa0>)
 8000f0a:	f7ff fcfb 	bl	8000904 <USART_Init>

    USART_InitStruct.USART_BaudRate = 115200;
 8000f0e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f12:	60bb      	str	r3, [r7, #8]
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f14:	2300      	movs	r3, #0
 8000f16:	82bb      	strh	r3, [r7, #20]
    USART_InitStruct.USART_Mode = USART_Mode_Tx;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	827b      	strh	r3, [r7, #18]
    USART_InitStruct.USART_Parity = USART_Parity_No;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	823b      	strh	r3, [r7, #16]
    USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	81fb      	strh	r3, [r7, #14]
    USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000f24:	2300      	movs	r3, #0
 8000f26:	81bb      	strh	r3, [r7, #12]
    USART_Init(USART3, &USART_InitStruct);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <Usart_InitializeAp+0xa4>)
 8000f30:	f7ff fce8 	bl	8000904 <USART_Init>
    USART_Cmd(USART3, ENABLE);  // USART3 aktif edilir.
 8000f34:	2101      	movs	r1, #1
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <Usart_InitializeAp+0xa4>)
 8000f38:	f7ff fd9e 	bl	8000a78 <USART_Cmd>

	/* USART1 Rx interrupt aktif ediliyor
	 * USART'dan herhangi bir data geldiginde
	 * USART1_IRQHandler() adiyla isimlendirdigimiz fonksiyona gider
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // USART1 Rx interrupt aktif ediliyor
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f240 5125 	movw	r1, #1317	; 0x525
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <Usart_InitializeAp+0xa0>)
 8000f44:	f7ff fdca 	bl	8000adc <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // USART1 interrupt ina ince ayar vermek istiyoruz.
 8000f48:	2325      	movs	r3, #37	; 0x25
 8000f4a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// Öncelik olarak bu interrupt kaynagina 0 veriyoruz. ( 0 yazarak En öncelikli kaynak yapiyoruz )
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // Kendi bagli olduðu vektordeki alt grup içinde de en öncelikli olarak kurduk
 8000f50:	2300      	movs	r3, #0
 8000f52:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // USART1 interrupt kanali aktif edilir.
 8000f54:	2301      	movs	r3, #1
 8000f56:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);							 // Yaptigimiz ayarlari NVIC birimine yüklüyoruz.
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f934 	bl	80001c8 <NVIC_Init>

    USART_Cmd(USART1, ENABLE);  // Nihayetinde USART1 aktif edilir.
 8000f60:	2101      	movs	r1, #1
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <Usart_InitializeAp+0xa0>)
 8000f64:	f7ff fd88 	bl	8000a78 <USART_Cmd>
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40004800 	.word	0x40004800

08000f78 <ESP8266_Init>:
* Description    : Modül bir aga baglanana kadar burada kalir.
* Input          : None
* Return         : None
***********************************************************/
static void ESP8266_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    static uint8_t ESPInitCase=0;

    // Modul Reset Pini High yapiliyor.
    GPIO_SetBits(GPIOB,GPIO_Pin_13);
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4885      	ldr	r0, [pc, #532]	; (8001198 <ESP8266_Init+0x220>)
 8000f82:	f7ff fb23 	bl	80005cc <GPIO_SetBits>

    switch(ESPInitCase)
 8000f86:	4b85      	ldr	r3, [pc, #532]	; (800119c <ESP8266_Init+0x224>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	f200 8102 	bhi.w	8001194 <ESP8266_Init+0x21c>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <ESP8266_Init+0x20>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fc5 	.word	0x08000fc5
 8000f9c:	08000fdb 	.word	0x08000fdb
 8000fa0:	08001011 	.word	0x08001011
 8000fa4:	08001027 	.word	0x08001027
 8000fa8:	08001073 	.word	0x08001073
 8000fac:	08001089 	.word	0x08001089
 8000fb0:	080010bb 	.word	0x080010bb
 8000fb4:	080010d1 	.word	0x080010d1
 8000fb8:	08001115 	.word	0x08001115
 8000fbc:	0800112b 	.word	0x0800112b
 8000fc0:	0800115d 	.word	0x0800115d
    {
        case 0:
            // Standart AT Komutu gonderilir , Cevabi OK olmalidir.
            USART_puts(USART1,"AT\r\n");
 8000fc4:	4976      	ldr	r1, [pc, #472]	; (80011a0 <ESP8266_Init+0x228>)
 8000fc6:	4877      	ldr	r0, [pc, #476]	; (80011a4 <ESP8266_Init+0x22c>)
 8000fc8:	f7ff ff08 	bl	8000ddc <USART_puts>
            // 1 saniye gecikme koyuyoruz.
            Delay(1000000L);
 8000fcc:	4876      	ldr	r0, [pc, #472]	; (80011a8 <ESP8266_Init+0x230>)
 8000fce:	f7ff fef5 	bl	8000dbc <Delay>
            ESPInitCase = 1;
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <ESP8266_Init+0x224>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
        break;
 8000fd8:	e0dc      	b.n	8001194 <ESP8266_Init+0x21c>

        case 1:
            // STRSTR fonksiyonu metin icinde metin arayan bir fonksiyondur
            // Eger aranilan metni bulabilirse pointer adresi ile geri donus yapar
            // Bulamaz ise NULL dondurur. Bizde null'dan farklı mı diye sorariz.
            if (strstr(g_arrui8ESP8266Buf,"OK") != NULL)
 8000fda:	4974      	ldr	r1, [pc, #464]	; (80011ac <ESP8266_Init+0x234>)
 8000fdc:	4874      	ldr	r0, [pc, #464]	; (80011b0 <ESP8266_Init+0x238>)
 8000fde:	f000 faa5 	bl	800152c <strstr>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d009      	beq.n	8000ffc <ESP8266_Init+0x84>
            {
                Clear_ESPBuffer();
 8000fe8:	f7ff feca 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"Module Erisildi");
 8000fec:	4971      	ldr	r1, [pc, #452]	; (80011b4 <ESP8266_Init+0x23c>)
 8000fee:	4872      	ldr	r0, [pc, #456]	; (80011b8 <ESP8266_Init+0x240>)
 8000ff0:	f7ff fef4 	bl	8000ddc <USART_puts>
                ESPInitCase = 2;
 8000ff4:	4b69      	ldr	r3, [pc, #420]	; (800119c <ESP8266_Init+0x224>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
            {
                Clear_ESPBuffer();
                USART_puts(USART3,"Modul Bulunamadi, Tekrar Deneniyor");
                ESPInitCase = 0;
            }
        break;
 8000ffa:	e0cb      	b.n	8001194 <ESP8266_Init+0x21c>
                Clear_ESPBuffer();
 8000ffc:	f7ff fec0 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"Modul Bulunamadi, Tekrar Deneniyor");
 8001000:	496e      	ldr	r1, [pc, #440]	; (80011bc <ESP8266_Init+0x244>)
 8001002:	486d      	ldr	r0, [pc, #436]	; (80011b8 <ESP8266_Init+0x240>)
 8001004:	f7ff feea 	bl	8000ddc <USART_puts>
                ESPInitCase = 0;
 8001008:	4b64      	ldr	r3, [pc, #400]	; (800119c <ESP8266_Init+0x224>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
        break;
 800100e:	e0c1      	b.n	8001194 <ESP8266_Init+0x21c>

        case 2:
            // Modulun 3 modu var gerekli bilgi datasheet'de biz 1 olmasini istiyoruz
            USART_puts(USART1,"AT+CWMODE?\r\n");
 8001010:	496b      	ldr	r1, [pc, #428]	; (80011c0 <ESP8266_Init+0x248>)
 8001012:	4864      	ldr	r0, [pc, #400]	; (80011a4 <ESP8266_Init+0x22c>)
 8001014:	f7ff fee2 	bl	8000ddc <USART_puts>
            // 1 saniye gecikme koyuyoruz.
            Delay(1000000L);
 8001018:	4863      	ldr	r0, [pc, #396]	; (80011a8 <ESP8266_Init+0x230>)
 800101a:	f7ff fecf 	bl	8000dbc <Delay>
            ESPInitCase = 3;
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <ESP8266_Init+0x224>)
 8001020:	2203      	movs	r2, #3
 8001022:	701a      	strb	r2, [r3, #0]
        break;
 8001024:	e0b6      	b.n	8001194 <ESP8266_Init+0x21c>

        case 3:
            // Gelen cevap mode 1 'mi
            if (strstr(g_arrui8ESP8266Buf,"+CWMODE:1") != NULL)
 8001026:	4967      	ldr	r1, [pc, #412]	; (80011c4 <ESP8266_Init+0x24c>)
 8001028:	4861      	ldr	r0, [pc, #388]	; (80011b0 <ESP8266_Init+0x238>)
 800102a:	f000 fa7f 	bl	800152c <strstr>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <ESP8266_Init+0xd0>
            {
                Clear_ESPBuffer();
 8001034:	f7ff fea4 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"MODE Ayar Dogru");
 8001038:	4963      	ldr	r1, [pc, #396]	; (80011c8 <ESP8266_Init+0x250>)
 800103a:	485f      	ldr	r0, [pc, #380]	; (80011b8 <ESP8266_Init+0x240>)
 800103c:	f7ff fece 	bl	8000ddc <USART_puts>
                ESPInitCase = 4;
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <ESP8266_Init+0x224>)
 8001042:	2204      	movs	r2, #4
 8001044:	701a      	strb	r2, [r3, #0]

                Clear_ESPBuffer();
                USART_puts(USART3,"MOD Degistirilir.");
                ESPInitCase = 0;
            }
        break;
 8001046:	e0a5      	b.n	8001194 <ESP8266_Init+0x21c>
                USART_puts(USART1,"AT+CWMODE=1\r\n");
 8001048:	4960      	ldr	r1, [pc, #384]	; (80011cc <ESP8266_Init+0x254>)
 800104a:	4856      	ldr	r0, [pc, #344]	; (80011a4 <ESP8266_Init+0x22c>)
 800104c:	f7ff fec6 	bl	8000ddc <USART_puts>
                USART_puts(USART1,"AT+RST\r\n");
 8001050:	495f      	ldr	r1, [pc, #380]	; (80011d0 <ESP8266_Init+0x258>)
 8001052:	4854      	ldr	r0, [pc, #336]	; (80011a4 <ESP8266_Init+0x22c>)
 8001054:	f7ff fec2 	bl	8000ddc <USART_puts>
                Delay(1000000L);
 8001058:	4853      	ldr	r0, [pc, #332]	; (80011a8 <ESP8266_Init+0x230>)
 800105a:	f7ff feaf 	bl	8000dbc <Delay>
                Clear_ESPBuffer();
 800105e:	f7ff fe8f 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"MOD Degistirilir.");
 8001062:	495c      	ldr	r1, [pc, #368]	; (80011d4 <ESP8266_Init+0x25c>)
 8001064:	4854      	ldr	r0, [pc, #336]	; (80011b8 <ESP8266_Init+0x240>)
 8001066:	f7ff feb9 	bl	8000ddc <USART_puts>
                ESPInitCase = 0;
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <ESP8266_Init+0x224>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
        break;
 8001070:	e090      	b.n	8001194 <ESP8266_Init+0x21c>

        case 4:
            // Baglanilacak olan wifi agina ait kullanici adi ve sifre girisi yapilir.
            USART_puts(USART1,"AT+CWJAP=\"MrDarK\",\"oztekin006\"\r\n");
 8001072:	4959      	ldr	r1, [pc, #356]	; (80011d8 <ESP8266_Init+0x260>)
 8001074:	484b      	ldr	r0, [pc, #300]	; (80011a4 <ESP8266_Init+0x22c>)
 8001076:	f7ff feb1 	bl	8000ddc <USART_puts>
            // 1 saniye gecikme koyuyoruz.
            Delay(2000000L);
 800107a:	4858      	ldr	r0, [pc, #352]	; (80011dc <ESP8266_Init+0x264>)
 800107c:	f7ff fe9e 	bl	8000dbc <Delay>
            ESPInitCase = 5;
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <ESP8266_Init+0x224>)
 8001082:	2205      	movs	r2, #5
 8001084:	701a      	strb	r2, [r3, #0]
        break;
 8001086:	e085      	b.n	8001194 <ESP8266_Init+0x21c>

         case 5:
             // Baglanti saglandiginde OK Cevabi alinir
            if (strstr(g_arrui8ESP8266Buf,"OK") != NULL)
 8001088:	4948      	ldr	r1, [pc, #288]	; (80011ac <ESP8266_Init+0x234>)
 800108a:	4849      	ldr	r0, [pc, #292]	; (80011b0 <ESP8266_Init+0x238>)
 800108c:	f000 fa4e 	bl	800152c <strstr>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d009      	beq.n	80010aa <ESP8266_Init+0x132>
            {
                Clear_ESPBuffer();
 8001096:	f7ff fe73 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"Modeme Baglanti yapildi");
 800109a:	4951      	ldr	r1, [pc, #324]	; (80011e0 <ESP8266_Init+0x268>)
 800109c:	4846      	ldr	r0, [pc, #280]	; (80011b8 <ESP8266_Init+0x240>)
 800109e:	f7ff fe9d 	bl	8000ddc <USART_puts>
                ESPInitCase = 6;
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <ESP8266_Init+0x224>)
 80010a4:	2206      	movs	r2, #6
 80010a6:	701a      	strb	r2, [r3, #0]
            else
            {
                Delay(1000000L);
                USART_puts(USART3,"Baglanti Bekleniyor.");
            }
        break;
 80010a8:	e074      	b.n	8001194 <ESP8266_Init+0x21c>
                Delay(1000000L);
 80010aa:	483f      	ldr	r0, [pc, #252]	; (80011a8 <ESP8266_Init+0x230>)
 80010ac:	f7ff fe86 	bl	8000dbc <Delay>
                USART_puts(USART3,"Baglanti Bekleniyor.");
 80010b0:	494c      	ldr	r1, [pc, #304]	; (80011e4 <ESP8266_Init+0x26c>)
 80010b2:	4841      	ldr	r0, [pc, #260]	; (80011b8 <ESP8266_Init+0x240>)
 80010b4:	f7ff fe92 	bl	8000ddc <USART_puts>
        break;
 80010b8:	e06c      	b.n	8001194 <ESP8266_Init+0x21c>

        case 6:
            // IP adresi nedir diye soruyoruz ?
            USART_puts(USART1,"AT+CIFSR\r\n");
 80010ba:	494b      	ldr	r1, [pc, #300]	; (80011e8 <ESP8266_Init+0x270>)
 80010bc:	4839      	ldr	r0, [pc, #228]	; (80011a4 <ESP8266_Init+0x22c>)
 80010be:	f7ff fe8d 	bl	8000ddc <USART_puts>
            // 1 saniye gecikme koyuyoruz.
            Delay(1000000L);
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <ESP8266_Init+0x230>)
 80010c4:	f7ff fe7a 	bl	8000dbc <Delay>
            ESPInitCase = 7;
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <ESP8266_Init+0x224>)
 80010ca:	2207      	movs	r2, #7
 80010cc:	701a      	strb	r2, [r3, #0]
        break;
 80010ce:	e061      	b.n	8001194 <ESP8266_Init+0x21c>

        case 7:
            // IP alana kadar error bilgisi gonderir. Onu ayırırız. =)
            if (strstr(g_arrui8ESP8266Buf,"ERROR") == NULL)
 80010d0:	4946      	ldr	r1, [pc, #280]	; (80011ec <ESP8266_Init+0x274>)
 80010d2:	4837      	ldr	r0, [pc, #220]	; (80011b0 <ESP8266_Init+0x238>)
 80010d4:	f000 fa2a 	bl	800152c <strstr>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <ESP8266_Init+0x182>
            {
                USART_puts(USART3,"Alinan IP = ");
 80010de:	4944      	ldr	r1, [pc, #272]	; (80011f0 <ESP8266_Init+0x278>)
 80010e0:	4835      	ldr	r0, [pc, #212]	; (80011b8 <ESP8266_Init+0x240>)
 80010e2:	f7ff fe7b 	bl	8000ddc <USART_puts>
                // Gelen bilginin 11.karakterinden itibaren IP adresi yaziyor.
                USART_puts(USART3,&g_arrui8ESP8266Buf[11]);
 80010e6:	4943      	ldr	r1, [pc, #268]	; (80011f4 <ESP8266_Init+0x27c>)
 80010e8:	4833      	ldr	r0, [pc, #204]	; (80011b8 <ESP8266_Init+0x240>)
 80010ea:	f7ff fe77 	bl	8000ddc <USART_puts>
                Clear_ESPBuffer();
 80010ee:	f7ff fe47 	bl	8000d80 <Clear_ESPBuffer>
                ESPInitCase=8;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <ESP8266_Init+0x224>)
 80010f4:	2208      	movs	r2, #8
 80010f6:	701a      	strb	r2, [r3, #0]
                USART_puts(USART3,"Tekrar Dene.");
                Clear_ESPBuffer();
                ESPInitCase=6;
            }

        break;
 80010f8:	e04c      	b.n	8001194 <ESP8266_Init+0x21c>
                Delay(1000000L);
 80010fa:	482b      	ldr	r0, [pc, #172]	; (80011a8 <ESP8266_Init+0x230>)
 80010fc:	f7ff fe5e 	bl	8000dbc <Delay>
                USART_puts(USART3,"Tekrar Dene.");
 8001100:	493d      	ldr	r1, [pc, #244]	; (80011f8 <ESP8266_Init+0x280>)
 8001102:	482d      	ldr	r0, [pc, #180]	; (80011b8 <ESP8266_Init+0x240>)
 8001104:	f7ff fe6a 	bl	8000ddc <USART_puts>
                Clear_ESPBuffer();
 8001108:	f7ff fe3a 	bl	8000d80 <Clear_ESPBuffer>
                ESPInitCase=6;
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <ESP8266_Init+0x224>)
 800110e:	2206      	movs	r2, #6
 8001110:	701a      	strb	r2, [r3, #0]
        break;
 8001112:	e03f      	b.n	8001194 <ESP8266_Init+0x21c>

        case 8:
            // Baglanilacak siteye ait bilgiler girildi.
            USART_puts(USART1,"AT+CIPSTART=\"TCP\",\"www.picproje.org\",80\r\n");
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <ESP8266_Init+0x284>)
 8001116:	4823      	ldr	r0, [pc, #140]	; (80011a4 <ESP8266_Init+0x22c>)
 8001118:	f7ff fe60 	bl	8000ddc <USART_puts>
            // 1 saniye gecikme koyuyoruz.
            Delay(1000000L);
 800111c:	4822      	ldr	r0, [pc, #136]	; (80011a8 <ESP8266_Init+0x230>)
 800111e:	f7ff fe4d 	bl	8000dbc <Delay>
            ESPInitCase = 9;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <ESP8266_Init+0x224>)
 8001124:	2209      	movs	r2, #9
 8001126:	701a      	strb	r2, [r3, #0]
        break;
 8001128:	e034      	b.n	8001194 <ESP8266_Init+0x21c>

        case 9:
            // Baglanti kuruldugunda Linked diye bir cevap aliriz.
            if (strstr(g_arrui8ESP8266Buf,"Linked") != NULL)
 800112a:	4935      	ldr	r1, [pc, #212]	; (8001200 <ESP8266_Init+0x288>)
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <ESP8266_Init+0x238>)
 800112e:	f000 f9fd 	bl	800152c <strstr>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d009      	beq.n	800114c <ESP8266_Init+0x1d4>
            {
                Clear_ESPBuffer();
 8001138:	f7ff fe22 	bl	8000d80 <Clear_ESPBuffer>
                USART_puts(USART3,"Server ile baglanti kuruldu");
 800113c:	4931      	ldr	r1, [pc, #196]	; (8001204 <ESP8266_Init+0x28c>)
 800113e:	481e      	ldr	r0, [pc, #120]	; (80011b8 <ESP8266_Init+0x240>)
 8001140:	f7ff fe4c 	bl	8000ddc <USART_puts>
                ESPInitCase = 10;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <ESP8266_Init+0x224>)
 8001146:	220a      	movs	r2, #10
 8001148:	701a      	strb	r2, [r3, #0]
            {
                // Cevap gelene kadar bekler
                Delay(1000000L);
                USART_puts(USART3,"Baglanti Bekleniyor.");
            }
        break;
 800114a:	e023      	b.n	8001194 <ESP8266_Init+0x21c>
                Delay(1000000L);
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <ESP8266_Init+0x230>)
 800114e:	f7ff fe35 	bl	8000dbc <Delay>
                USART_puts(USART3,"Baglanti Bekleniyor.");
 8001152:	4924      	ldr	r1, [pc, #144]	; (80011e4 <ESP8266_Init+0x26c>)
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <ESP8266_Init+0x240>)
 8001156:	f7ff fe41 	bl	8000ddc <USART_puts>
        break;
 800115a:	e01b      	b.n	8001194 <ESP8266_Init+0x21c>

        case 10:
            // Artık HTTP Request bilgimizi gonderebiliriz.
            // CIPSEND ile kac byte bilgi gondereceksek o kadar yazarız.
            USART_puts(USART1,"AT+CIPSEND=100\r\n");
 800115c:	492a      	ldr	r1, [pc, #168]	; (8001208 <ESP8266_Init+0x290>)
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <ESP8266_Init+0x22c>)
 8001160:	f7ff fe3c 	bl	8000ddc <USART_puts>
            // Komutu verdikten sonra bize '>' bilgisi geliyor.
            Delay(1000000L);
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <ESP8266_Init+0x230>)
 8001166:	f7ff fe29 	bl	8000dbc <Delay>
            // HTTP Request Hazirlanir.
            USART_puts(USART1,"GET / HTTP/1.1\r\n");
 800116a:	4928      	ldr	r1, [pc, #160]	; (800120c <ESP8266_Init+0x294>)
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <ESP8266_Init+0x22c>)
 800116e:	f7ff fe35 	bl	8000ddc <USART_puts>
            USART_puts(USART1,"Host: www.picproje.org\r\n");
 8001172:	4927      	ldr	r1, [pc, #156]	; (8001210 <ESP8266_Init+0x298>)
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <ESP8266_Init+0x22c>)
 8001176:	f7ff fe31 	bl	8000ddc <USART_puts>
            USART_puts(USART1,"Accept: */*\r\n");
 800117a:	4926      	ldr	r1, [pc, #152]	; (8001214 <ESP8266_Init+0x29c>)
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <ESP8266_Init+0x22c>)
 800117e:	f7ff fe2d 	bl	8000ddc <USART_puts>
            USART_puts(USART1,"Content-Type: text/html\r\n");
 8001182:	4925      	ldr	r1, [pc, #148]	; (8001218 <ESP8266_Init+0x2a0>)
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <ESP8266_Init+0x22c>)
 8001186:	f7ff fe29 	bl	8000ddc <USART_puts>
            USART_puts(USART1,"Content-Length: 0\r\n\r\n\r\n");
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <ESP8266_Init+0x2a4>)
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <ESP8266_Init+0x22c>)
 800118e:	f7ff fe25 	bl	8000ddc <USART_puts>

            // Buradan sonra http request'e gelen cevaplari degerlendirerek
            // Ne yapmak istiyorsanız onu yapabilirsiniz =)
            // Herkese bol sanslar ! Iyi gunler efenim.
            while(1);
 8001192:	e7fe      	b.n	8001192 <ESP8266_Init+0x21a>
        break;

    }
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020400 	.word	0x40020400
 800119c:	2000003e 	.word	0x2000003e
 80011a0:	0800157c 	.word	0x0800157c
 80011a4:	40011000 	.word	0x40011000
 80011a8:	000f4240 	.word	0x000f4240
 80011ac:	08001584 	.word	0x08001584
 80011b0:	200000bc 	.word	0x200000bc
 80011b4:	08001588 	.word	0x08001588
 80011b8:	40004800 	.word	0x40004800
 80011bc:	08001598 	.word	0x08001598
 80011c0:	080015bc 	.word	0x080015bc
 80011c4:	080015cc 	.word	0x080015cc
 80011c8:	080015d8 	.word	0x080015d8
 80011cc:	080015e8 	.word	0x080015e8
 80011d0:	080015f8 	.word	0x080015f8
 80011d4:	08001604 	.word	0x08001604
 80011d8:	08001618 	.word	0x08001618
 80011dc:	001e8480 	.word	0x001e8480
 80011e0:	0800163c 	.word	0x0800163c
 80011e4:	08001654 	.word	0x08001654
 80011e8:	0800166c 	.word	0x0800166c
 80011ec:	08001678 	.word	0x08001678
 80011f0:	08001680 	.word	0x08001680
 80011f4:	200000c7 	.word	0x200000c7
 80011f8:	08001690 	.word	0x08001690
 80011fc:	080016a0 	.word	0x080016a0
 8001200:	080016cc 	.word	0x080016cc
 8001204:	080016d4 	.word	0x080016d4
 8001208:	080016f0 	.word	0x080016f0
 800120c:	08001704 	.word	0x08001704
 8001210:	08001718 	.word	0x08001718
 8001214:	08001734 	.word	0x08001734
 8001218:	08001744 	.word	0x08001744
 800121c:	08001760 	.word	0x08001760

08001220 <main>:

int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    // System Clock Init Edilir.
    SystemInit();
 8001224:	f000 f8ac 	bl	8001380 <SystemInit>
    // Usart modullerinin portlarının hardware ayarlari yapilir.
    Usart_InitializeHW();
 8001228:	f7ff fdfc 	bl	8000e24 <Usart_InitializeHW>
    // Usart modullerinin clock , baud ve interrupt ayarlari yapilir.
    Usart_InitializeAp();
 800122c:	f7ff fe50 	bl	8000ed0 <Usart_InitializeAp>
    // Giris metnimiz =)
    USART_puts(USART3,"MrDarK & PicProje ESP8266 Example Starting..! \r\n");
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <main+0x24>)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <main+0x28>)
 8001234:	f7ff fdd2 	bl	8000ddc <USART_puts>
    // Komut gondermeden once module ait bufferı temizleriz.
    Clear_ESPBuffer();
 8001238:	f7ff fda2 	bl	8000d80 <Clear_ESPBuffer>

    while(1)
    {
        // Bakmayın init yazdığına her biseyi yapiyor =)
        ESP8266_Init();
 800123c:	f7ff fe9c 	bl	8000f78 <ESP8266_Init>
 8001240:	e7fc      	b.n	800123c <main+0x1c>
 8001242:	bf00      	nop
 8001244:	08001778 	.word	0x08001778
 8001248:	40004800 	.word	0x40004800

0800124c <USART1_IRQHandler>:


}

// USART1 interrupt Alt Programi
void USART1_IRQHandler(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
    // USART1 RX interrupt flag kontrol edilir.
    if( USART_GetITStatus(USART1, USART_IT_RXNE) )
 8001252:	f240 5125 	movw	r1, #1317	; 0x525
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <USART1_IRQHandler+0x4c>)
 8001258:	f7ff fc88 	bl	8000b6c <USART_GetITStatus>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <USART1_IRQHandler+0x44>
    {
        uint8_t Received_Byte = USART1->DR; // Gelen bilgi değişken içine alinir.
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <USART1_IRQHandler+0x4c>)
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	b29b      	uxth	r3, r3
 8001268:	71fb      	strb	r3, [r7, #7]
        USART3->DR = Received_Byte;         // Debug monitor icin ayni bilgi usart3'e gonderilir.
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <USART1_IRQHandler+0x50>)
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	b292      	uxth	r2, r2
 8001270:	809a      	strh	r2, [r3, #4]

        // Strstr fonksiyonu için eklendi, modülden null karakteri gelebiliyordu , onu engellemis olduk.
        if(Received_Byte != 0)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <USART1_IRQHandler+0x44>
        {
            g_arrui8ESP8266Buf[ESPWriteIndex] = Received_Byte;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <USART1_IRQHandler+0x54>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <USART1_IRQHandler+0x58>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	5453      	strb	r3, [r2, r1]
            ESPWriteIndex++;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <USART1_IRQHandler+0x54>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <USART1_IRQHandler+0x54>)
 800128e:	801a      	strh	r2, [r3, #0]
        }

    }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40011000 	.word	0x40011000
 800129c:	40004800 	.word	0x40004800
 80012a0:	2000003c 	.word	0x2000003c
 80012a4:	200000bc 	.word	0x200000bc

080012a8 <EVAL_AUDIO_TransferComplete_CallBack>:




void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80012b2:	bf00      	nop
}
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80012c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012d6:	e003      	b.n	80012e0 <LoopCopyDataInit>

080012d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012de:	3104      	adds	r1, #4

080012e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e8:	d3f6      	bcc.n	80012d8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012ec:	e002      	b.n	80012f4 <LoopFillZerobss>

080012ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012f0:	f842 3b04 	str.w	r3, [r2], #4

080012f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f8:	d3f9      	bcc.n	80012ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012fa:	f000 f841 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f000 f8f1 	bl	80014e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff ff8d 	bl	8001220 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001308:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800130c:	080017b4 	.word	0x080017b4
  ldr  r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001314:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001318:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800131c:	200002b0 	.word	0x200002b0

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>

08001322 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001334:	e7fe      	b.n	8001334 <HardFault_Handler+0x4>

08001336 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800133a:	e7fe      	b.n	800133a <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001340:	e7fe      	b.n	8001340 <BusFault_Handler+0x4>

08001342 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001346:	e7fe      	b.n	8001346 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <SystemInit+0x60>)
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <SystemInit+0x60>)
 8001388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <SystemInit+0x64>)
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SystemInit+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SystemInit+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <SystemInit+0x64>)
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <SystemInit+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <SystemInit+0x64>)
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <SystemInit+0x68>)
 80013ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <SystemInit+0x64>)
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <SystemInit+0x64>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80013ce:	f000 f80d 	bl	80013ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <SystemInit+0x60>)
 80013d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d8:	609a      	str	r2, [r3, #8]
#endif
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	40023800 	.word	0x40023800
 80013e8:	24003010 	.word	0x24003010

080013ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <SetSysClock+0xe8>)
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <SetSysClock+0xe8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <SetSysClock+0xe8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <SetSysClock+0x38>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001422:	d1f0      	bne.n	8001406 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <SetSysClock+0xe8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001430:	2301      	movs	r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	e001      	b.n	800143a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d142      	bne.n	80014c6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <SetSysClock+0xe8>)
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <SetSysClock+0xe8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <SetSysClock+0xec>)
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <SetSysClock+0xec>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001456:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <SetSysClock+0xe8>)
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <SetSysClock+0xe8>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <SetSysClock+0xe8>)
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <SetSysClock+0xe8>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <SetSysClock+0xe8>)
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <SetSysClock+0xe8>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001476:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <SetSysClock+0xe8>)
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <SetSysClock+0xf0>)
 800147c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <SetSysClock+0xe8>)
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <SetSysClock+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001488:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800148a:	bf00      	nop
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <SetSysClock+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f9      	beq.n	800148c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <SetSysClock+0xf4>)
 800149a:	f240 6205 	movw	r2, #1541	; 0x605
 800149e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <SetSysClock+0xe8>)
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <SetSysClock+0xe8>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <SetSysClock+0xe8>)
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <SetSysClock+0xe8>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80014b8:	bf00      	nop
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SetSysClock+0xe8>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d1f9      	bne.n	80014ba <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000
 80014dc:	07405408 	.word	0x07405408
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <__libc_init_array>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	4e0d      	ldr	r6, [pc, #52]	; (800151c <__libc_init_array+0x38>)
 80014e8:	4c0d      	ldr	r4, [pc, #52]	; (8001520 <__libc_init_array+0x3c>)
 80014ea:	1ba4      	subs	r4, r4, r6
 80014ec:	10a4      	asrs	r4, r4, #2
 80014ee:	2500      	movs	r5, #0
 80014f0:	42a5      	cmp	r5, r4
 80014f2:	d109      	bne.n	8001508 <__libc_init_array+0x24>
 80014f4:	4e0b      	ldr	r6, [pc, #44]	; (8001524 <__libc_init_array+0x40>)
 80014f6:	4c0c      	ldr	r4, [pc, #48]	; (8001528 <__libc_init_array+0x44>)
 80014f8:	f000 f834 	bl	8001564 <_init>
 80014fc:	1ba4      	subs	r4, r4, r6
 80014fe:	10a4      	asrs	r4, r4, #2
 8001500:	2500      	movs	r5, #0
 8001502:	42a5      	cmp	r5, r4
 8001504:	d105      	bne.n	8001512 <__libc_init_array+0x2e>
 8001506:	bd70      	pop	{r4, r5, r6, pc}
 8001508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800150c:	4798      	blx	r3
 800150e:	3501      	adds	r5, #1
 8001510:	e7ee      	b.n	80014f0 <__libc_init_array+0xc>
 8001512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001516:	4798      	blx	r3
 8001518:	3501      	adds	r5, #1
 800151a:	e7f2      	b.n	8001502 <__libc_init_array+0x1e>
 800151c:	080017ac 	.word	0x080017ac
 8001520:	080017ac 	.word	0x080017ac
 8001524:	080017ac 	.word	0x080017ac
 8001528:	080017b0 	.word	0x080017b0

0800152c <strstr>:
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	7803      	ldrb	r3, [r0, #0]
 8001530:	b133      	cbz	r3, 8001540 <strstr+0x14>
 8001532:	4603      	mov	r3, r0
 8001534:	4618      	mov	r0, r3
 8001536:	1c5e      	adds	r6, r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b933      	cbnz	r3, 800154a <strstr+0x1e>
 800153c:	4618      	mov	r0, r3
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001540:	780b      	ldrb	r3, [r1, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf18      	it	ne
 8001546:	2000      	movne	r0, #0
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	1e4d      	subs	r5, r1, #1
 800154c:	1e44      	subs	r4, r0, #1
 800154e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001552:	2a00      	cmp	r2, #0
 8001554:	d0f3      	beq.n	800153e <strstr+0x12>
 8001556:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800155a:	4297      	cmp	r7, r2
 800155c:	4633      	mov	r3, r6
 800155e:	d0f6      	beq.n	800154e <strstr+0x22>
 8001560:	e7e8      	b.n	8001534 <strstr+0x8>
	...

08001564 <_init>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	bf00      	nop
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr

08001570 <_fini>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr
